<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
abstract class PluginvjGuardADUser extends BasevjGuardADUser
{
  protected
    $groups         = null,
    $permissions    = null,
    $allPermissions = null;
    
  public function getName() {
    if($this->getGuid()=="admin")
    {
      return "admin";
    }
    else
    {
      if(ad::isUsernameAndGuidCorrect($this->getUsername(),$this->getGuid())===true)
      {
        return ad::getDisplayname($this->getUsername());
      }
      else
      {
        $name = ad::getFromGuid($this->getGuid(), "dn");
        return ($name!="")? $name: "Unknown";
      }
    }
  }

  public function save(Doctrine_Connection $con = null)
  {
    if($this->getGuid()!="admin" && $this->getIsSuperAdmin()!=1)
    {
      $username = ad::getFromGuid($this->getGuid());
      $this->setUsername($username);
      $ad = ad::initAD();
      $ad->group_add_user(ad::getGroupAuthorized(), $username);
    }
    if(is_array($this->username))
    {
      $this->username = $this->username[0];
      $this->guid = $this->guid[0];
      $this->is_super_admin = $this->is_super_admin[0];
    }
    return parent::save($con);
  }

  public function delete(Doctrine_Connection $con = null)
  {
    if($this->getGuid()!="admin")
    {
      $ad = ad::initAD();
      $ad->group_del_user(ad::getGroupAuthorized(), $this->getUsername());
    }
    return parent::delete($con);
  }

  public function reloadGroupsAndPermissions()
  {
    $this->groups         = null;
    $this->permissions    = null;
    $this->allPermissions = null;
  }

  public function hasGroup($name)
  {
    $this->loadGroupsAndPermissions();
    return isset($this->groups[$name]);
  }

  public function getGroupNames()
  {
    $this->loadGroupsAndPermissions();
    return array_keys($this->groups);
  }

  public function hasPermission($name)
  {
    $this->loadGroupsAndPermissions();
    return isset($this->permissions[$name]);
  }

  public function getPermissionNames()
  {
    $this->loadGroupsAndPermissions();
    return array_keys($this->permissions);
  }

  // merge of permission in a group + permissions
  public function getAllPermissions()
  {
    if (!$this->allPermissions)
    {
      $this->allPermissions = array();
      $permissions = $this->getPermissions();
      foreach ($permissions as $permission)
      {
        $this->allPermissions[$permission->getName()] = $permission;
      }

      foreach ($this->getGroups() as $group)
      {
        if($group->getIsActivated()===true)
        {
          foreach ($group->getPermissions() as $permission)
          {
            $this->allPermissions[$permission->getName()] = $permission;
          }
        }
      }
    }

    return $this->allPermissions;
  }

  public function getAllPermissionNames()
  {
    return array_keys($this->getAllPermissions());
  }

  public function loadGroupsAndPermissions()
  {
    $this->getAllPermissions();
    if (!$this->permissions)
    {
      $permissions = $this->getPermissions();
      foreach ($permissions as $permission)
      {
        $this->permissions[$permission->getName()] = $permission;
      }
    }
    if (!$this->groups)
    {
      $groups = $this->getGroups();
      foreach ($groups as $group)
      {
        $this->groups[$group->getName()] = $group;
      }
    }
  }
}