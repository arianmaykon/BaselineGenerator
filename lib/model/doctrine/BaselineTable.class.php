<?php

/**
 * BaselineTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class BaselineTable extends Doctrine_Table
{

	/**
	 * @param Baseline $baseline
	 * @param array $issuesObjects
	 * @param array $issuesTypes
	 * @return string
	 */
	public function getJiraVersionDescription($baseline, $issuesObjects, $issuesTypes) {
		if (is_array($issuesObjects)) {
			$description = '';

			$issues = array(
				'bugs' => array(
					'id' => null,
					'issues' => array()
				),
				'crs' => array(
					'id' => null,
					'issues' => array()
				),
				'improvements' => array(
					'id' => null,
					'issues' => array()
				),
				'demands' => array(
					'id' => null,
					'issues' => array()
				)
			);

			foreach ($issuesTypes as $key => $issueType) {
				if (strcasecmp($issueType->name, JiraAPISoapClient::ISSUE_TYPE_NAME_BUG) == 0) {
					$issues['bugs']['id'] = $issueType->id;
				}
				if (strcasecmp($issueType->name, JiraAPISoapClient::ISSUE_TYPE_NAME_CR) == 0) {
					$issues['crs']['id'] = $issueType->id;
				}
				if (strcasecmp($issueType->name, JiraAPISoapClient::ISSUE_TYPE_NAME_IMPROVEMENT) == 0) {
					$issues['improvements']['id'] = $issueType->id;
				}
				if (strcasecmp($issueType->name, JiraAPISoapClient::ISSUE_TYPE_NAME_DEMAND) == 0) {
					$issues['demands']['id'] = $issueType->id;
				}
			}

			foreach ($issuesObjects as $key => $issue) {
				switch ($issue->type) {
					case $issues['bugs']['id']: {
						array_push($issues['bugs']['issues'], $issue->key);
						break;
					}
					case $issues['crs']['id']: {
						array_push($issues['crs']['issues'], $issue->key);
						break;
					}
					case $issues['improvements']['id']: {
						array_push($issues['improvements']['issues'], $issue->key);
						break;
					}
					case $issues['demands']['id']: {
						array_push($issues['demands']['issues'], $issue->key);
						break;
					}
				}
			}

			if (strcasecmp($baseline->getType(), Baseline::TYPE_RELEASE) == 0) {
				$description = 'Baseline de release da ';
			}
			if (strcasecmp($baseline->getType(), Baseline::TYPE_TEST) == 0) {
				$description = 'Baseline de teste da ';
			}


			$getDescription = function(&$arr, $data, $singularPrefix, $pluralPrefix) {
				$count = is_array($data)?count($data):0;
				if ($count) {
					if ($count > 1) {
						$s = $pluralPrefix . ' ';

						$last = array_pop($data);

						$s .= implode(', ', $data);
						$s .= ' e ' . $last;
					} else {
						$s = $singularPrefix . ' ';
						$s .= reset($data);
					}

					$arr []= $s;
				}
			};


			$descriptionAux = array();

			$getDescription($descriptionAux, $issues['bugs']['issues'],
				'correção do bug', 'correção dos bugs');

			$getDescription($descriptionAux, $issues['crs']['issues'],
				'implementação da CR', 'implementação das CRs');

			$getDescription($descriptionAux, $issues['improvements']['issues'],
				'implementação da melhoria', 'implementação das melhorias');

			$getDescription($descriptionAux, $issues['demands']['issues'],
				'implementação da demanda', 'implementação das demandas');


			$count = is_array($descriptionAux)?count($descriptionAux):0;
			if ($count) {
				if ($count > 1) {
					$last = array_pop($descriptionAux);

					$s = implode(', ', $descriptionAux);
					$s .= ' e ' . $last;
				} else {
					$s = reset($descriptionAux);
				}

				$description .= $s;
			}



			if (strcasecmp($baseline->getType(), Baseline::TYPE_RELEASE) == 0) {
				$description .= '. Conteúdo: código-fonte e release notes.';
			}
			if (strcasecmp($baseline->getType(), Baseline::TYPE_TEST) == 0) {
//TODO: Check it really has ETFs to include.
				$description .= '. Conteúdo: código-fonte e ETFs.';
			}

			return $description;
		}

		return null;
	}

    /**
     * Returns an instance of this class.
     *
     * @return object BaselineTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Baseline');
    }
}